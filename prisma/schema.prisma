generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Admin
  Buyer
  Affiliate
  Accountant
}

enum PaymentType {
  Cpa
  Cpl
  CpaCrg
}

enum LeadSource {
  Google
  Facebook
  Instagram
  TikTok
  Other
}

model User {
  id           String            @id @default(uuid())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  email        String            @unique
  passwordHash String
  roles        UserRolesToUser[]
  brokers      Broker[]
}

model UserRolesToUser {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      UserRole
  createdAt DateTime @default(now())
}

model Broker {
  id                String         @id @default(uuid())
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  name              String
  manager           User?          @relation(fields: [managerId], references: [id], onDelete: SetNull)
  managerId         String?
  managerPercentage Float          @default(0) @db.DoublePrecision
  deliveryPlans     DeliveryPlan[]
}

model BrokerIntegration {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  name         String         @unique
  DeliveryPlan DeliveryPlan[]
}

model Funnel {
  id           String         @id @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  name         String         @unique
  websiteUrl   String
  country      String
  language     String?
  DeliveryPlan DeliveryPlan[]
  Lead         Lead[]
}

model DeliveryPlan {
  id                    String             @id @default(uuid())
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  name                  String
  broker                Broker             @relation(fields: [brokerId], references: [id], onDelete: Cascade)
  brokerId              String
  brokerIntegration     BrokerIntegration? @relation(fields: [brokerIntegrationId], references: [id], onDelete: SetNull)
  brokerIntegrationId   String?
  funnel                Funnel?            @relation(fields: [funnelId], references: [id], onDelete: SetNull)
  funnelId              String?
  buyPrice              Float
  sellPrice             Float
  dailyCap              Int?               @db.SmallInt
  totalCap              Int?               @db.SmallInt
  startDate             DateTime           @db.Date
  endDate               DateTime           @db.Date
  startEndDatesTimezone Int                @db.SmallInt
  workHoursStart        DateTime?          @db.Time
  workHoursEnd          DateTime?          @db.Time
  workHoursTimezone     Int?               @db.SmallInt
  paymentType           PaymentType
}

model Lead {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  firstName String
  lastName  String
  email     String
  phone     String
  sentAt    DateTime
  depositAt DateTime
  status    String
  clickId   String
  agentIp   String
  funnel    Funnel?    @relation(fields: [funnelId], references: [id], onDelete: SetNull)
  funnelId  String?
  source    LeadSource
}
